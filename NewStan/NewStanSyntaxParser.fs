// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "NewStanSyntaxParser.fsy"

open NewStanSyntax 

# 10 "NewStanSyntaxParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | SEMICOLON
  | ALEFT
  | ARIGHT
  | LEFT
  | RIGHT
  | LBRACE
  | RBRACE
  | DEF
  | RET
  | ELMULT
  | ELDIV
  | EQ
  | SIM
  | PLUS
  | MINUS
  | MULT
  | DIV
  | LE
  | GE
  | LEQ
  | GEQ
  | IF
  | ELSE
  | WHILE
  | FOR
  | VECTOR
  | MATRIX
  | DATA
  | INTTYPE
  | REALTYPE
  | FUNIDE of (string)
  | IDE of (string)
  | REAL of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_ALEFT
    | TOKEN_ARIGHT
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_DEF
    | TOKEN_RET
    | TOKEN_ELMULT
    | TOKEN_ELDIV
    | TOKEN_EQ
    | TOKEN_SIM
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_VECTOR
    | TOKEN_MATRIX
    | TOKEN_DATA
    | TOKEN_INTTYPE
    | TOKEN_REALTYPE
    | TOKEN_FUNIDE
    | TOKEN_IDE
    | TOKEN_REAL
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_defs
    | NONTERM_deff
    | NONTERM_args
    | NONTERM_arg
    | NONTERM_statement_seq
    | NONTERM_statement_signle
    | NONTERM_block
    | NONTERM_exp
    | NONTERM_exps
    | NONTERM_lhs
    | NONTERM_dist
    | NONTERM_tp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | SEMICOLON  -> 2 
  | ALEFT  -> 3 
  | ARIGHT  -> 4 
  | LEFT  -> 5 
  | RIGHT  -> 6 
  | LBRACE  -> 7 
  | RBRACE  -> 8 
  | DEF  -> 9 
  | RET  -> 10 
  | ELMULT  -> 11 
  | ELDIV  -> 12 
  | EQ  -> 13 
  | SIM  -> 14 
  | PLUS  -> 15 
  | MINUS  -> 16 
  | MULT  -> 17 
  | DIV  -> 18 
  | LE  -> 19 
  | GE  -> 20 
  | LEQ  -> 21 
  | GEQ  -> 22 
  | IF  -> 23 
  | ELSE  -> 24 
  | WHILE  -> 25 
  | FOR  -> 26 
  | VECTOR  -> 27 
  | MATRIX  -> 28 
  | DATA  -> 29 
  | INTTYPE  -> 30 
  | REALTYPE  -> 31 
  | FUNIDE _ -> 32 
  | IDE _ -> 33 
  | REAL _ -> 34 
  | INT _ -> 35 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_SEMICOLON 
  | 3 -> TOKEN_ALEFT 
  | 4 -> TOKEN_ARIGHT 
  | 5 -> TOKEN_LEFT 
  | 6 -> TOKEN_RIGHT 
  | 7 -> TOKEN_LBRACE 
  | 8 -> TOKEN_RBRACE 
  | 9 -> TOKEN_DEF 
  | 10 -> TOKEN_RET 
  | 11 -> TOKEN_ELMULT 
  | 12 -> TOKEN_ELDIV 
  | 13 -> TOKEN_EQ 
  | 14 -> TOKEN_SIM 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_MINUS 
  | 17 -> TOKEN_MULT 
  | 18 -> TOKEN_DIV 
  | 19 -> TOKEN_LE 
  | 20 -> TOKEN_GE 
  | 21 -> TOKEN_LEQ 
  | 22 -> TOKEN_GEQ 
  | 23 -> TOKEN_IF 
  | 24 -> TOKEN_ELSE 
  | 25 -> TOKEN_WHILE 
  | 26 -> TOKEN_FOR 
  | 27 -> TOKEN_VECTOR 
  | 28 -> TOKEN_MATRIX 
  | 29 -> TOKEN_DATA 
  | 30 -> TOKEN_INTTYPE 
  | 31 -> TOKEN_REALTYPE 
  | 32 -> TOKEN_FUNIDE 
  | 33 -> TOKEN_IDE 
  | 34 -> TOKEN_REAL 
  | 35 -> TOKEN_INT 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_prog 
    | 5 -> NONTERM_defs 
    | 6 -> NONTERM_defs 
    | 7 -> NONTERM_deff 
    | 8 -> NONTERM_deff 
    | 9 -> NONTERM_deff 
    | 10 -> NONTERM_deff 
    | 11 -> NONTERM_deff 
    | 12 -> NONTERM_deff 
    | 13 -> NONTERM_args 
    | 14 -> NONTERM_args 
    | 15 -> NONTERM_arg 
    | 16 -> NONTERM_statement_seq 
    | 17 -> NONTERM_statement_seq 
    | 18 -> NONTERM_statement_seq 
    | 19 -> NONTERM_statement_seq 
    | 20 -> NONTERM_statement_seq 
    | 21 -> NONTERM_statement_seq 
    | 22 -> NONTERM_statement_seq 
    | 23 -> NONTERM_statement_seq 
    | 24 -> NONTERM_statement_seq 
    | 25 -> NONTERM_statement_seq 
    | 26 -> NONTERM_statement_signle 
    | 27 -> NONTERM_statement_signle 
    | 28 -> NONTERM_statement_signle 
    | 29 -> NONTERM_statement_signle 
    | 30 -> NONTERM_statement_signle 
    | 31 -> NONTERM_block 
    | 32 -> NONTERM_block 
    | 33 -> NONTERM_exp 
    | 34 -> NONTERM_exp 
    | 35 -> NONTERM_exp 
    | 36 -> NONTERM_exp 
    | 37 -> NONTERM_exp 
    | 38 -> NONTERM_exp 
    | 39 -> NONTERM_exp 
    | 40 -> NONTERM_exp 
    | 41 -> NONTERM_exp 
    | 42 -> NONTERM_exp 
    | 43 -> NONTERM_exp 
    | 44 -> NONTERM_exp 
    | 45 -> NONTERM_exp 
    | 46 -> NONTERM_exp 
    | 47 -> NONTERM_exp 
    | 48 -> NONTERM_exp 
    | 49 -> NONTERM_exp 
    | 50 -> NONTERM_exps 
    | 51 -> NONTERM_exps 
    | 52 -> NONTERM_exps 
    | 53 -> NONTERM_lhs 
    | 54 -> NONTERM_lhs 
    | 55 -> NONTERM_dist 
    | 56 -> NONTERM_tp 
    | 57 -> NONTERM_tp 
    | 58 -> NONTERM_tp 
    | 59 -> NONTERM_tp 
    | 60 -> NONTERM_tp 
    | 61 -> NONTERM_tp 
    | 62 -> NONTERM_tp 
    | 63 -> NONTERM_tp 
    | 64 -> NONTERM_tp 
    | 65 -> NONTERM_tp 
    | 66 -> NONTERM_tp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | SEMICOLON  -> "SEMICOLON" 
  | ALEFT  -> "ALEFT" 
  | ARIGHT  -> "ARIGHT" 
  | LEFT  -> "LEFT" 
  | RIGHT  -> "RIGHT" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | DEF  -> "DEF" 
  | RET  -> "RET" 
  | ELMULT  -> "ELMULT" 
  | ELDIV  -> "ELDIV" 
  | EQ  -> "EQ" 
  | SIM  -> "SIM" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | LE  -> "LE" 
  | GE  -> "GE" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | VECTOR  -> "VECTOR" 
  | MATRIX  -> "MATRIX" 
  | DATA  -> "DATA" 
  | INTTYPE  -> "INTTYPE" 
  | REALTYPE  -> "REALTYPE" 
  | FUNIDE _ -> "FUNIDE" 
  | IDE _ -> "IDE" 
  | REAL _ -> "REAL" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | ALEFT  -> (null : System.Object) 
  | ARIGHT  -> (null : System.Object) 
  | LEFT  -> (null : System.Object) 
  | RIGHT  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | DEF  -> (null : System.Object) 
  | RET  -> (null : System.Object) 
  | ELMULT  -> (null : System.Object) 
  | ELDIV  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | SIM  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | VECTOR  -> (null : System.Object) 
  | MATRIX  -> (null : System.Object) 
  | DATA  -> (null : System.Object) 
  | INTTYPE  -> (null : System.Object) 
  | REALTYPE  -> (null : System.Object) 
  | FUNIDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 3us; 7us; 8us; 1us; 65535us; 6us; 7us; 2us; 65535us; 10us; 11us; 37us; 38us; 2us; 65535us; 10us; 36us; 37us; 36us; 11us; 65535us; 0us; 5us; 3us; 4us; 13us; 14us; 20us; 21us; 44us; 45us; 48us; 49us; 52us; 53us; 56us; 57us; 60us; 61us; 63us; 64us; 82us; 83us; 13us; 65535us; 0us; 62us; 3us; 62us; 13us; 62us; 20us; 62us; 44us; 62us; 48us; 62us; 52us; 62us; 56us; 62us; 60us; 62us; 63us; 62us; 78us; 85us; 80us; 85us; 82us; 62us; 2us; 65535us; 78us; 79us; 80us; 81us; 23us; 65535us; 15us; 16us; 22us; 23us; 54us; 55us; 67us; 68us; 72us; 108us; 76us; 77us; 89us; 108us; 92us; 93us; 95us; 96us; 110us; 98us; 111us; 99us; 112us; 100us; 113us; 101us; 114us; 102us; 115us; 103us; 116us; 104us; 117us; 105us; 118us; 106us; 119us; 107us; 120us; 108us; 123us; 108us; 126us; 109us; 129us; 108us; 5us; 65535us; 72us; 73us; 89us; 90us; 120us; 121us; 123us; 124us; 129us; 130us; 13us; 65535us; 0us; 66us; 3us; 66us; 13us; 66us; 20us; 66us; 44us; 66us; 48us; 66us; 52us; 66us; 56us; 66us; 60us; 66us; 63us; 66us; 78us; 66us; 80us; 66us; 82us; 66us; 5us; 65535us; 26us; 27us; 30us; 31us; 46us; 47us; 58us; 59us; 70us; 71us; 14us; 65535us; 0us; 50us; 3us; 50us; 10us; 39us; 13us; 50us; 20us; 50us; 37us; 39us; 41us; 42us; 44us; 50us; 48us; 50us; 52us; 50us; 56us; 50us; 60us; 50us; 63us; 50us; 82us; 50us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 10us; 13us; 16us; 28us; 42us; 45us; 69us; 75us; 89us; 95us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 4us; 1us; 2us; 1us; 3us; 2us; 5us; 6us; 2us; 5us; 6us; 1us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 3us; 7us; 9us; 11us; 3us; 7us; 9us; 11us; 3us; 7us; 9us; 11us; 3us; 7us; 9us; 11us; 2us; 7us; 9us; 11us; 7us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 7us; 1us; 7us; 3us; 8us; 10us; 12us; 3us; 8us; 10us; 12us; 3us; 8us; 10us; 12us; 2us; 8us; 10us; 11us; 8us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 2us; 13us; 14us; 1us; 13us; 1us; 13us; 4us; 15us; 56us; 57us; 58us; 1us; 15us; 2us; 16us; 17us; 5us; 16us; 17us; 56us; 57us; 58us; 2us; 16us; 17us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 8us; 18us; 19us; 20us; 23us; 24us; 56us; 57us; 58us; 5us; 18us; 19us; 20us; 23us; 24us; 1us; 18us; 1us; 18us; 2us; 19us; 23us; 12us; 19us; 23us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 2us; 19us; 23us; 1us; 19us; 2us; 20us; 24us; 2us; 20us; 24us; 2us; 20us; 24us; 1us; 20us; 2us; 21us; 22us; 2us; 21us; 22us; 1us; 21us; 1us; 25us; 1us; 26us; 1us; 26us; 11us; 26us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 4us; 27us; 28us; 53us; 54us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 2us; 29us; 30us; 2us; 29us; 30us; 12us; 29us; 30us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 2us; 29us; 30us; 2us; 29us; 30us; 1us; 29us; 1us; 29us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 3us; 35us; 37us; 49us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 11us; 37us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 37us; 1us; 38us; 11us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 1us; 38us; 11us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 11us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 11us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 11us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 11us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 11us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 11us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 11us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 11us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 11us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 12us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 50us; 51us; 11us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 54us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 52us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 55us; 3us; 56us; 57us; 58us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 58us; 3us; 59us; 60us; 63us; 2us; 59us; 60us; 1us; 59us; 1us; 59us; 1us; 60us; 1us; 60us; 3us; 61us; 62us; 64us; 2us; 61us; 62us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 65us; 1us; 66us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 13us; 16us; 19us; 21us; 28us; 35us; 39us; 43us; 47us; 51us; 54us; 66us; 68us; 70us; 74us; 78us; 82us; 85us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 124us; 126us; 128us; 133us; 135us; 138us; 144us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 168us; 174us; 176us; 178us; 181us; 194us; 197us; 199us; 202us; 205us; 208us; 210us; 213us; 216us; 218us; 220us; 222us; 224us; 236us; 241us; 243us; 245us; 247us; 249us; 251us; 254us; 257us; 270us; 273us; 276us; 278us; 280us; 282us; 284us; 286us; 288us; 290us; 292us; 296us; 298us; 300us; 302us; 304us; 316us; 318us; 320us; 332us; 334us; 346us; 358us; 370us; 382us; 394us; 406us; 418us; 430us; 442us; 454us; 467us; 479us; 481us; 483us; 485us; 487us; 489us; 491us; 493us; 495us; 497us; 499us; 501us; 503us; 505us; 507us; 509us; 511us; 513us; 515us; 517us; 519us; 521us; 523us; 527us; 529us; 531us; 533us; 535us; 537us; 541us; 544us; 546us; 548us; 550us; 552us; 556us; 559us; 561us; 563us; 565us; 567us; 569us; 571us; 573us; 575us; 577us; |]
let _fsyacc_action_rows = 156
let _fsyacc_actionTableElements = [|9us; 32768us; 0us; 65us; 9us; 6us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 0us; 49152us; 0us; 16385us; 8us; 16388us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 33us; 9us; 1us; 16390us; 9us; 6us; 0us; 16389us; 1us; 32768us; 5us; 10us; 5us; 32768us; 6us; 19us; 27us; 138us; 28us; 144us; 30us; 155us; 31us; 154us; 1us; 32768us; 6us; 12us; 1us; 32768us; 7us; 13us; 8us; 32768us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 2us; 32768us; 8us; 34us; 10us; 15us; 6us; 32768us; 3us; 89us; 5us; 95us; 14us; 26us; 33us; 88us; 34us; 86us; 35us; 87us; 11us; 32768us; 2us; 17us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 1us; 32768us; 8us; 18us; 0us; 16391us; 1us; 32768us; 7us; 20us; 8us; 32768us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 2us; 32768us; 8us; 35us; 10us; 22us; 6us; 32768us; 3us; 89us; 5us; 95us; 14us; 30us; 33us; 88us; 34us; 86us; 35us; 87us; 11us; 32768us; 2us; 24us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 1us; 32768us; 8us; 25us; 0us; 16392us; 1us; 32768us; 33us; 128us; 1us; 32768us; 2us; 28us; 1us; 32768us; 8us; 29us; 0us; 16393us; 1us; 32768us; 33us; 128us; 1us; 32768us; 2us; 32us; 1us; 32768us; 8us; 33us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 1us; 16398us; 1us; 37us; 4us; 32768us; 27us; 138us; 28us; 144us; 30us; 155us; 31us; 154us; 0us; 16397us; 2us; 32768us; 3us; 132us; 33us; 40us; 0us; 16399us; 4us; 32768us; 27us; 138us; 28us; 144us; 30us; 155us; 31us; 154us; 2us; 32768us; 3us; 132us; 33us; 43us; 2us; 32768us; 2us; 44us; 14us; 46us; 8us; 32768us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 0us; 16400us; 1us; 32768us; 33us; 128us; 1us; 32768us; 2us; 48us; 8us; 32768us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 0us; 16401us; 2us; 32768us; 3us; 132us; 33us; 51us; 3us; 32768us; 2us; 52us; 13us; 54us; 14us; 58us; 8us; 32768us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 0us; 16402us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 11us; 32768us; 2us; 56us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 8us; 16407us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 0us; 16403us; 1us; 32768us; 33us; 128us; 1us; 32768us; 2us; 60us; 8us; 16408us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 0us; 16404us; 1us; 32768us; 2us; 63us; 8us; 16406us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 0us; 16405us; 0us; 16409us; 1us; 32768us; 13us; 67us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 10us; 16410us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 3us; 16437us; 3us; 126us; 5us; 72us; 14us; 70us; 1us; 32768us; 33us; 128us; 0us; 16411us; 6us; 32768us; 0us; 125us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 1us; 32768us; 6us; 74us; 0us; 16412us; 1us; 32768us; 5us; 76us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 11us; 32768us; 6us; 78us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 3us; 32768us; 7us; 82us; 23us; 75us; 33us; 69us; 1us; 16414us; 24us; 80us; 3us; 32768us; 7us; 82us; 23us; 75us; 33us; 69us; 0us; 16413us; 8us; 32768us; 0us; 65us; 23us; 75us; 27us; 138us; 28us; 144us; 29us; 41us; 30us; 155us; 31us; 154us; 33us; 69us; 1us; 32768us; 8us; 84us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 2us; 16419us; 3us; 92us; 5us; 120us; 6us; 32768us; 0us; 125us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 1us; 32768us; 4us; 91us; 0us; 16420us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 11us; 32768us; 4us; 94us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 0us; 16421us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 11us; 32768us; 6us; 97us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 0us; 16422us; 10us; 16423us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 10us; 16424us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 7us; 16425us; 11us; 110us; 12us; 111us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 9us; 16426us; 11us; 110us; 12us; 111us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 10us; 16427us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 10us; 16428us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 10us; 16429us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 10us; 16430us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 8us; 16431us; 11us; 110us; 12us; 111us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 6us; 16432us; 11us; 110us; 12us; 111us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 11us; 16435us; 1us; 123us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 11us; 32768us; 4us; 127us; 11us; 110us; 12us; 111us; 15us; 113us; 16us; 118us; 17us; 112us; 18us; 119us; 19us; 114us; 20us; 115us; 21us; 116us; 22us; 117us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 6us; 32768us; 0us; 125us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 1us; 32768us; 6us; 122us; 0us; 16433us; 6us; 32768us; 0us; 125us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 0us; 16434us; 0us; 16436us; 5us; 32768us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 0us; 16438us; 1us; 32768us; 5us; 129us; 6us; 32768us; 0us; 125us; 3us; 89us; 5us; 95us; 33us; 88us; 34us; 86us; 35us; 87us; 1us; 32768us; 6us; 131us; 0us; 16439us; 3us; 32768us; 4us; 137us; 33us; 133us; 35us; 135us; 1us; 32768us; 4us; 134us; 0us; 16440us; 1us; 32768us; 4us; 136us; 0us; 16441us; 0us; 16442us; 1us; 16447us; 3us; 139us; 2us; 32768us; 33us; 140us; 35us; 142us; 1us; 32768us; 4us; 141us; 0us; 16443us; 1us; 32768us; 4us; 143us; 0us; 16444us; 1us; 16448us; 3us; 145us; 2us; 32768us; 33us; 146us; 35us; 150us; 1us; 32768us; 1us; 147us; 1us; 32768us; 33us; 148us; 1us; 32768us; 4us; 149us; 0us; 16445us; 1us; 32768us; 1us; 151us; 1us; 32768us; 35us; 152us; 1us; 32768us; 4us; 153us; 0us; 16446us; 0us; 16449us; 0us; 16450us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 10us; 11us; 12us; 21us; 22us; 23us; 25us; 27us; 28us; 30us; 36us; 38us; 40us; 49us; 52us; 59us; 71us; 73us; 74us; 76us; 85us; 88us; 95us; 107us; 109us; 110us; 112us; 114us; 116us; 117us; 119us; 121us; 123us; 124us; 125us; 126us; 128us; 133us; 134us; 137us; 138us; 143us; 146us; 149us; 158us; 159us; 161us; 163us; 172us; 173us; 176us; 180us; 189us; 190us; 196us; 208us; 217us; 218us; 220us; 222us; 231us; 232us; 234us; 243us; 244us; 245us; 247us; 253us; 264us; 268us; 270us; 271us; 278us; 280us; 281us; 283us; 289us; 301us; 305us; 307us; 311us; 312us; 321us; 323us; 324us; 325us; 326us; 327us; 330us; 337us; 339us; 340us; 346us; 358us; 359us; 365us; 377us; 378us; 389us; 400us; 408us; 418us; 429us; 440us; 451us; 462us; 471us; 478us; 490us; 502us; 508us; 514us; 520us; 526us; 532us; 538us; 544us; 550us; 556us; 562us; 569us; 571us; 572us; 579us; 580us; 581us; 587us; 588us; 590us; 597us; 599us; 600us; 604us; 606us; 607us; 609us; 610us; 611us; 613us; 616us; 618us; 619us; 621us; 622us; 624us; 627us; 629us; 631us; 633us; 634us; 636us; 638us; 640us; 641us; 642us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 1us; 1us; 3us; 2us; 10us; 9us; 11us; 10us; 7us; 6us; 3us; 1us; 2us; 5us; 7us; 4us; 6us; 6us; 3us; 2us; 5us; 5us; 1us; 3us; 3us; 4us; 7us; 5us; 3us; 1us; 1us; 1us; 1us; 3us; 4us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 3us; 1us; 1us; 1us; 4us; 4us; 4us; 4us; 3us; 4us; 4us; 6us; 6us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16386us; 16387us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16394us; 16395us; 16396us; 65535us; 65535us; 16397us; 65535us; 16399us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 16405us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 16415us; 16416us; 16417us; 16418us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 16421us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16433us; 65535us; 16434us; 16436us; 65535us; 16438us; 65535us; 65535us; 65535us; 16439us; 65535us; 65535us; 16440us; 65535us; 16441us; 16442us; 65535us; 65535us; 65535us; 16443us; 65535us; 16444us; 65535us; 65535us; 65535us; 65535us; 65535us; 16445us; 65535us; 65535us; 65535us; 16446us; 16449us; 16450us; |]
let _fsyacc_reductions ()  =    [| 
# 355 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : NewStanSyntax.NewStanProg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 364 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "NewStanSyntaxParser.fsy"
                                   _1 
                   )
# 32 "NewStanSyntaxParser.fsy"
                 : NewStanSyntax.NewStanProg));
# 375 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'defs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "NewStanSyntaxParser.fsy"
                                              _1, _2 
                   )
# 35 "NewStanSyntaxParser.fsy"
                 : 'prog));
# 387 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "NewStanSyntaxParser.fsy"
                                         [], _1 
                   )
# 36 "NewStanSyntaxParser.fsy"
                 : 'prog));
# 398 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'defs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "NewStanSyntaxParser.fsy"
                                _1, Skip 
                   )
# 37 "NewStanSyntaxParser.fsy"
                 : 'prog));
# 409 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'deff)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'defs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "NewStanSyntaxParser.fsy"
                                         _2 :: _3 
                   )
# 41 "NewStanSyntaxParser.fsy"
                 : 'defs));
# 421 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'deff)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "NewStanSyntaxParser.fsy"
                                    [_2] 
                   )
# 42 "NewStanSyntaxParser.fsy"
                 : 'defs));
# 432 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'args)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "NewStanSyntaxParser.fsy"
                                                                                             FunE(_1, _3, _6, _8) 
                   )
# 46 "NewStanSyntaxParser.fsy"
                 : 'deff));
# 446 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "NewStanSyntaxParser.fsy"
                                                                                        FunE(_1, [], _5, _7) 
                   )
# 47 "NewStanSyntaxParser.fsy"
                 : 'deff));
# 459 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'args)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "NewStanSyntaxParser.fsy"
                                                                                                  FunD(_1, _3, _6, _9) 
                   )
# 48 "NewStanSyntaxParser.fsy"
                 : 'deff));
# 473 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "NewStanSyntaxParser.fsy"
                                                                                             FunD(_1, [], _5, _8) 
                   )
# 49 "NewStanSyntaxParser.fsy"
                 : 'deff));
# 486 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'args)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "NewStanSyntaxParser.fsy"
                                                                          FunV(_1, _3, _6, ()) 
                   )
# 50 "NewStanSyntaxParser.fsy"
                 : 'deff));
# 499 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "NewStanSyntaxParser.fsy"
                                                                     FunV(_1, [], _5, ()) 
                   )
# 51 "NewStanSyntaxParser.fsy"
                 : 'deff));
# 511 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "NewStanSyntaxParser.fsy"
                                          _1 :: _3 
                   )
# 54 "NewStanSyntaxParser.fsy"
                 : 'args));
# 523 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "NewStanSyntaxParser.fsy"
                               [_1] 
                   )
# 55 "NewStanSyntaxParser.fsy"
                 : 'args));
# 534 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "NewStanSyntaxParser.fsy"
                                  (_1, LevelVar (next())), _2 
                   )
# 58 "NewStanSyntaxParser.fsy"
                 : 'arg));
# 546 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "NewStanSyntaxParser.fsy"
                                                               DataDecl(_2, _3, _5) 
                   )
# 63 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 559 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "NewStanSyntaxParser.fsy"
                                                                        DataDecl(_2, _3, Seq(Sample(_3, _5), _7)) 
                   )
# 64 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 573 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "NewStanSyntaxParser.fsy"
                                                          Block(((_1, LevelVar (next())), _2), _4) 
                   )
# 65 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 586 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "NewStanSyntaxParser.fsy"
                                                                 Block(((_1, LevelVar (next())), _2), Seq(Assign(I(_2), _4), _6)) 
                   )
# 66 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 600 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "NewStanSyntaxParser.fsy"
                                                                   Block(((_1, LevelVar (next())), _2), Seq(Sample(_2, _4), _6)) 
                   )
# 67 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 614 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_signle)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "NewStanSyntaxParser.fsy"
                                                                    Seq(_1, _3) 
                   )
# 68 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 626 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_signle)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "NewStanSyntaxParser.fsy"
                                                      _1 
                   )
# 69 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 637 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "NewStanSyntaxParser.fsy"
                                                   Block(((_1, LevelVar (next())), _2), Assign(I(_2), _4)) 
                   )
# 70 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 650 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "NewStanSyntaxParser.fsy"
                                                     Block(((_1, LevelVar (next())), _2), Sample(_2, _4)) 
                   )
# 71 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 663 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "NewStanSyntaxParser.fsy"
                               Skip 
                   )
# 72 "NewStanSyntaxParser.fsy"
                 : 'statement_seq));
# 673 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lhs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "NewStanSyntaxParser.fsy"
                                      Assign(_1, _3) 
                   )
# 75 "NewStanSyntaxParser.fsy"
                 : 'statement_signle));
# 685 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "NewStanSyntaxParser.fsy"
                                        Sample(_1, _3) 
                   )
# 76 "NewStanSyntaxParser.fsy"
                 : 'statement_signle));
# 697 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "NewStanSyntaxParser.fsy"
                                               VCall(_1, _3) 
                   )
# 77 "NewStanSyntaxParser.fsy"
                 : 'statement_signle));
# 709 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "NewStanSyntaxParser.fsy"
                                                              If(_3, _5, _7) 
                   )
# 78 "NewStanSyntaxParser.fsy"
                 : 'statement_signle));
# 722 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "NewStanSyntaxParser.fsy"
                                                   If(_3, _5, Skip) 
                   )
# 79 "NewStanSyntaxParser.fsy"
                 : 'statement_signle));
# 734 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_seq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "NewStanSyntaxParser.fsy"
                                                       _2 
                   )
# 82 "NewStanSyntaxParser.fsy"
                 : 'block));
# 745 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_signle)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "NewStanSyntaxParser.fsy"
                                            _1 
                   )
# 83 "NewStanSyntaxParser.fsy"
                 : 'block));
# 756 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "NewStanSyntaxParser.fsy"
                                Const(_1) 
                   )
# 86 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 767 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "NewStanSyntaxParser.fsy"
                                Const(float _1) 
                   )
# 87 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 778 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "NewStanSyntaxParser.fsy"
                                Var(_1) 
                   )
# 88 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 789 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "NewStanSyntaxParser.fsy"
                                             Arr(_2) 
                   )
# 89 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 800 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "NewStanSyntaxParser.fsy"
                                                ArrElExp(Var _1, _3) 
                   )
# 90 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 812 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "NewStanSyntaxParser.fsy"
                                          _2 
                   )
# 91 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 823 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "NewStanSyntaxParser.fsy"
                                          Prim(".*", [_1; _3])  
                   )
# 92 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 835 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "NewStanSyntaxParser.fsy"
                                         Prim("./", [_1; _3])  
                   )
# 93 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 847 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "NewStanSyntaxParser.fsy"
                                        Mul(_1, _3) 
                   )
# 94 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 859 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "NewStanSyntaxParser.fsy"
                                        Plus(_1, _3) 
                   )
# 95 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 871 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "NewStanSyntaxParser.fsy"
                                      Prim("<", [_1; _3]) 
                   )
# 96 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 883 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "NewStanSyntaxParser.fsy"
                                      Prim(">", [_1; _3]) 
                   )
# 97 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 895 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "NewStanSyntaxParser.fsy"
                                       Prim("<=", [_1; _3]) 
                   )
# 98 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 907 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "NewStanSyntaxParser.fsy"
                                       Prim(">=", [_1; _3]) 
                   )
# 99 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 919 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "NewStanSyntaxParser.fsy"
                                         Prim("-", [_1; _3]) 
                   )
# 100 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 931 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "NewStanSyntaxParser.fsy"
                                       Prim("/", [_1; _3]) 
                   )
# 101 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 943 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "NewStanSyntaxParser.fsy"
                                               if (Map.containsKey _1 Primitives) then Prim(_1, _3) else ECall(_1, _3) 
                   )
# 103 "NewStanSyntaxParser.fsy"
                 : 'exp));
# 955 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "NewStanSyntaxParser.fsy"
                                          _1 :: _3 
                   )
# 106 "NewStanSyntaxParser.fsy"
                 : 'exps));
# 967 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "NewStanSyntaxParser.fsy"
                               [_1] 
                   )
# 107 "NewStanSyntaxParser.fsy"
                 : 'exps));
# 978 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "NewStanSyntaxParser.fsy"
                               [] 
                   )
# 108 "NewStanSyntaxParser.fsy"
                 : 'exps));
# 988 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "NewStanSyntaxParser.fsy"
                               I(_1) 
                   )
# 111 "NewStanSyntaxParser.fsy"
                 : 'lhs));
# 999 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "NewStanSyntaxParser.fsy"
                                                A(I _1, _3) 
                   )
# 112 "NewStanSyntaxParser.fsy"
                 : 'lhs));
# 1011 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "NewStanSyntaxParser.fsy"
                                               if (Map.containsKey _1 Primitives) then Dist(_1, _3) else DCall(_1, _3) 
                   )
# 115 "NewStanSyntaxParser.fsy"
                 : 'dist));
# 1023 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "NewStanSyntaxParser.fsy"
                                              Array(_1, SizeVar(_3)) 
                   )
# 118 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1035 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "NewStanSyntaxParser.fsy"
                                               Array(_1, N(_3)) 
                   )
# 119 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1047 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "NewStanSyntaxParser.fsy"
                                           Array(_1, N(-1)) 
                   )
# 120 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1058 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "NewStanSyntaxParser.fsy"
                                                  Vector(SizeVar(_3)) 
                   )
# 121 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1069 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "NewStanSyntaxParser.fsy"
                                                  Vector(N(_3))
                   )
# 122 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1080 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "NewStanSyntaxParser.fsy"
                                                            Matrix(SizeVar(_3), SizeVar(_5))
                   )
# 123 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1092 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "NewStanSyntaxParser.fsy"
                                                            Matrix(N(_3), N(_5))
                   )
# 124 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1104 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "NewStanSyntaxParser.fsy"
                                    Vector(N(-1)) 
                   )
# 125 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1114 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "NewStanSyntaxParser.fsy"
                                    Matrix(N(-1), N(-1)) 
                   )
# 126 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1124 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "NewStanSyntaxParser.fsy"
                                    Real 
                   )
# 127 "NewStanSyntaxParser.fsy"
                 : 'tp));
# 1134 "NewStanSyntaxParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "NewStanSyntaxParser.fsy"
                                    Int 
                   )
# 128 "NewStanSyntaxParser.fsy"
                 : 'tp));
|]
# 1145 "NewStanSyntaxParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : NewStanSyntax.NewStanProg =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
