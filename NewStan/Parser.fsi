// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | COMMA
  | SEMICOLON
  | COLON
  | ALEFT
  | ARIGHT
  | LEFT
  | RIGHT
  | LBRACE
  | RBRACE
  | DEF
  | RET
  | ELMULT
  | ELDIV
  | EQ
  | SIM
  | PLUS
  | MINUS
  | MULT
  | DIV
  | LE
  | GE
  | LEQ
  | GEQ
  | IF
  | ELSE
  | WHILE
  | FOR
  | IN
  | VECTOR
  | MATRIX
  | DATA
  | INTTYPE
  | REALTYPE
  | FUNIDE of (string)
  | IDE of (string)
  | REAL of (float)
  | INT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_ALEFT
    | TOKEN_ARIGHT
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_DEF
    | TOKEN_RET
    | TOKEN_ELMULT
    | TOKEN_ELDIV
    | TOKEN_EQ
    | TOKEN_SIM
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_VECTOR
    | TOKEN_MATRIX
    | TOKEN_DATA
    | TOKEN_INTTYPE
    | TOKEN_REALTYPE
    | TOKEN_FUNIDE
    | TOKEN_IDE
    | TOKEN_REAL
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_args
    | NONTERM_arg
    | NONTERM_statement
    | NONTERM_compound_statement
    | NONTERM_block_item_list
    | NONTERM_block_item
    | NONTERM_declaration
    | NONTERM_iteration_statement
    | NONTERM_selection_statement
    | NONTERM_statement_single
    | NONTERM_exp
    | NONTERM_exps
    | NONTERM_lhs
    | NONTERM_dist
    | NONTERM_tp
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (SlicStanSyntax.SlicStanProg) 
