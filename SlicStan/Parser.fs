// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open SlicStanSyntax 

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | SEMICOLON
  | COLON
  | ALEFT
  | ARIGHT
  | LEFT
  | RIGHT
  | LBRACE
  | RBRACE
  | DEF
  | RET
  | ELMULT
  | ELDIV
  | EQ
  | SIM
  | PLUS
  | MINUS
  | MULT
  | DIV
  | LE
  | GE
  | LEQ
  | GEQ
  | IF
  | ELSE
  | WHILE
  | FOR
  | IN
  | VECTOR
  | MATRIX
  | DATA
  | INTTYPE
  | REALTYPE
  | FUNIDE of (string)
  | IDE of (string)
  | REAL of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_ALEFT
    | TOKEN_ARIGHT
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_DEF
    | TOKEN_RET
    | TOKEN_ELMULT
    | TOKEN_ELDIV
    | TOKEN_EQ
    | TOKEN_SIM
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_VECTOR
    | TOKEN_MATRIX
    | TOKEN_DATA
    | TOKEN_INTTYPE
    | TOKEN_REALTYPE
    | TOKEN_FUNIDE
    | TOKEN_IDE
    | TOKEN_REAL
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_args
    | NONTERM_arg
    | NONTERM_statement
    | NONTERM_compound_statement
    | NONTERM_block_item_list
    | NONTERM_block_item
    | NONTERM_declaration
    | NONTERM_iteration_statement
    | NONTERM_selection_statement
    | NONTERM_statement_single
    | NONTERM_exp
    | NONTERM_exps
    | NONTERM_lhs
    | NONTERM_dist
    | NONTERM_tp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | SEMICOLON  -> 2 
  | COLON  -> 3 
  | ALEFT  -> 4 
  | ARIGHT  -> 5 
  | LEFT  -> 6 
  | RIGHT  -> 7 
  | LBRACE  -> 8 
  | RBRACE  -> 9 
  | DEF  -> 10 
  | RET  -> 11 
  | ELMULT  -> 12 
  | ELDIV  -> 13 
  | EQ  -> 14 
  | SIM  -> 15 
  | PLUS  -> 16 
  | MINUS  -> 17 
  | MULT  -> 18 
  | DIV  -> 19 
  | LE  -> 20 
  | GE  -> 21 
  | LEQ  -> 22 
  | GEQ  -> 23 
  | IF  -> 24 
  | ELSE  -> 25 
  | WHILE  -> 26 
  | FOR  -> 27 
  | IN  -> 28 
  | VECTOR  -> 29 
  | MATRIX  -> 30 
  | DATA  -> 31 
  | INTTYPE  -> 32 
  | REALTYPE  -> 33 
  | FUNIDE _ -> 34 
  | IDE _ -> 35 
  | REAL _ -> 36 
  | INT _ -> 37 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_SEMICOLON 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_ALEFT 
  | 5 -> TOKEN_ARIGHT 
  | 6 -> TOKEN_LEFT 
  | 7 -> TOKEN_RIGHT 
  | 8 -> TOKEN_LBRACE 
  | 9 -> TOKEN_RBRACE 
  | 10 -> TOKEN_DEF 
  | 11 -> TOKEN_RET 
  | 12 -> TOKEN_ELMULT 
  | 13 -> TOKEN_ELDIV 
  | 14 -> TOKEN_EQ 
  | 15 -> TOKEN_SIM 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_MINUS 
  | 18 -> TOKEN_MULT 
  | 19 -> TOKEN_DIV 
  | 20 -> TOKEN_LE 
  | 21 -> TOKEN_GE 
  | 22 -> TOKEN_LEQ 
  | 23 -> TOKEN_GEQ 
  | 24 -> TOKEN_IF 
  | 25 -> TOKEN_ELSE 
  | 26 -> TOKEN_WHILE 
  | 27 -> TOKEN_FOR 
  | 28 -> TOKEN_IN 
  | 29 -> TOKEN_VECTOR 
  | 30 -> TOKEN_MATRIX 
  | 31 -> TOKEN_DATA 
  | 32 -> TOKEN_INTTYPE 
  | 33 -> TOKEN_REALTYPE 
  | 34 -> TOKEN_FUNIDE 
  | 35 -> TOKEN_IDE 
  | 36 -> TOKEN_REAL 
  | 37 -> TOKEN_INT 
  | 40 -> TOKEN_end_of_input
  | 38 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_args 
    | 4 -> NONTERM_args 
    | 5 -> NONTERM_arg 
    | 6 -> NONTERM_statement 
    | 7 -> NONTERM_statement 
    | 8 -> NONTERM_statement 
    | 9 -> NONTERM_statement 
    | 10 -> NONTERM_compound_statement 
    | 11 -> NONTERM_compound_statement 
    | 12 -> NONTERM_block_item_list 
    | 13 -> NONTERM_block_item_list 
    | 14 -> NONTERM_block_item_list 
    | 15 -> NONTERM_block_item_list 
    | 16 -> NONTERM_block_item 
    | 17 -> NONTERM_declaration 
    | 18 -> NONTERM_declaration 
    | 19 -> NONTERM_declaration 
    | 20 -> NONTERM_declaration 
    | 21 -> NONTERM_declaration 
    | 22 -> NONTERM_declaration 
    | 23 -> NONTERM_declaration 
    | 24 -> NONTERM_declaration 
    | 25 -> NONTERM_declaration 
    | 26 -> NONTERM_declaration 
    | 27 -> NONTERM_iteration_statement 
    | 28 -> NONTERM_iteration_statement 
    | 29 -> NONTERM_iteration_statement 
    | 30 -> NONTERM_iteration_statement 
    | 31 -> NONTERM_selection_statement 
    | 32 -> NONTERM_selection_statement 
    | 33 -> NONTERM_statement_single 
    | 34 -> NONTERM_statement_single 
    | 35 -> NONTERM_exp 
    | 36 -> NONTERM_exp 
    | 37 -> NONTERM_exp 
    | 38 -> NONTERM_exp 
    | 39 -> NONTERM_exp 
    | 40 -> NONTERM_exp 
    | 41 -> NONTERM_exp 
    | 42 -> NONTERM_exp 
    | 43 -> NONTERM_exp 
    | 44 -> NONTERM_exp 
    | 45 -> NONTERM_exp 
    | 46 -> NONTERM_exp 
    | 47 -> NONTERM_exp 
    | 48 -> NONTERM_exp 
    | 49 -> NONTERM_exp 
    | 50 -> NONTERM_exp 
    | 51 -> NONTERM_exp 
    | 52 -> NONTERM_exp 
    | 53 -> NONTERM_exps 
    | 54 -> NONTERM_exps 
    | 55 -> NONTERM_exps 
    | 56 -> NONTERM_lhs 
    | 57 -> NONTERM_lhs 
    | 58 -> NONTERM_dist 
    | 59 -> NONTERM_tp 
    | 60 -> NONTERM_tp 
    | 61 -> NONTERM_tp 
    | 62 -> NONTERM_tp 
    | 63 -> NONTERM_tp 
    | 64 -> NONTERM_tp 
    | 65 -> NONTERM_tp 
    | 66 -> NONTERM_tp 
    | 67 -> NONTERM_tp 
    | 68 -> NONTERM_tp 
    | 69 -> NONTERM_tp 
    | 70 -> NONTERM_tp 
    | 71 -> NONTERM_tp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 40 
let _fsyacc_tagOfErrorTerminal = 38

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | ALEFT  -> "ALEFT" 
  | ARIGHT  -> "ARIGHT" 
  | LEFT  -> "LEFT" 
  | RIGHT  -> "RIGHT" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | DEF  -> "DEF" 
  | RET  -> "RET" 
  | ELMULT  -> "ELMULT" 
  | ELDIV  -> "ELDIV" 
  | EQ  -> "EQ" 
  | SIM  -> "SIM" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | LE  -> "LE" 
  | GE  -> "GE" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | IN  -> "IN" 
  | VECTOR  -> "VECTOR" 
  | MATRIX  -> "MATRIX" 
  | DATA  -> "DATA" 
  | INTTYPE  -> "INTTYPE" 
  | REALTYPE  -> "REALTYPE" 
  | FUNIDE _ -> "FUNIDE" 
  | IDE _ -> "IDE" 
  | REAL _ -> "REAL" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | ALEFT  -> (null : System.Object) 
  | ARIGHT  -> (null : System.Object) 
  | LEFT  -> (null : System.Object) 
  | RIGHT  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | DEF  -> (null : System.Object) 
  | RET  -> (null : System.Object) 
  | ELMULT  -> (null : System.Object) 
  | ELDIV  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | SIM  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | VECTOR  -> (null : System.Object) 
  | MATRIX  -> (null : System.Object) 
  | DATA  -> (null : System.Object) 
  | INTTYPE  -> (null : System.Object) 
  | REALTYPE  -> (null : System.Object) 
  | FUNIDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 0us; 65535us; 0us; 65535us; 15us; 65535us; 0us; 17us; 9us; 17us; 14us; 17us; 21us; 17us; 25us; 17us; 29us; 17us; 33us; 17us; 37us; 17us; 39us; 17us; 48us; 49us; 51us; 52us; 56us; 57us; 59us; 60us; 64us; 65us; 66us; 67us; 15us; 65535us; 0us; 6us; 9us; 6us; 14us; 6us; 21us; 6us; 25us; 6us; 29us; 6us; 33us; 6us; 37us; 6us; 39us; 6us; 48us; 6us; 51us; 6us; 56us; 6us; 59us; 6us; 64us; 6us; 66us; 6us; 9us; 65535us; 0us; 3us; 9us; 11us; 14us; 15us; 21us; 22us; 25us; 26us; 29us; 30us; 33us; 34us; 37us; 38us; 39us; 40us; 9us; 65535us; 0us; 14us; 9us; 14us; 14us; 14us; 21us; 14us; 25us; 14us; 29us; 14us; 33us; 14us; 37us; 14us; 39us; 14us; 9us; 65535us; 0us; 13us; 9us; 13us; 14us; 13us; 21us; 13us; 25us; 13us; 29us; 13us; 33us; 13us; 37us; 13us; 39us; 13us; 15us; 65535us; 0us; 8us; 9us; 8us; 14us; 8us; 21us; 8us; 25us; 8us; 29us; 8us; 33us; 8us; 37us; 8us; 39us; 8us; 48us; 8us; 51us; 8us; 56us; 8us; 59us; 8us; 64us; 8us; 66us; 8us; 15us; 65535us; 0us; 7us; 9us; 7us; 14us; 7us; 21us; 7us; 25us; 7us; 29us; 7us; 33us; 7us; 37us; 7us; 39us; 7us; 48us; 7us; 51us; 7us; 56us; 7us; 59us; 7us; 64us; 7us; 66us; 7us; 15us; 65535us; 0us; 5us; 9us; 5us; 14us; 5us; 21us; 5us; 25us; 5us; 29us; 5us; 33us; 5us; 37us; 5us; 39us; 5us; 48us; 4us; 51us; 4us; 56us; 4us; 59us; 4us; 64us; 4us; 66us; 4us; 21us; 65535us; 31us; 32us; 62us; 63us; 69us; 70us; 76us; 94us; 79us; 80us; 96us; 82us; 98us; 83us; 100us; 84us; 101us; 85us; 102us; 86us; 103us; 87us; 104us; 88us; 105us; 89us; 106us; 90us; 107us; 91us; 108us; 92us; 109us; 93us; 110us; 94us; 113us; 94us; 117us; 95us; 120us; 94us; 4us; 65535us; 76us; 77us; 110us; 111us; 113us; 114us; 120us; 121us; 15us; 65535us; 0us; 68us; 9us; 68us; 14us; 68us; 21us; 68us; 25us; 68us; 29us; 68us; 33us; 68us; 37us; 68us; 39us; 68us; 48us; 68us; 51us; 68us; 56us; 68us; 59us; 68us; 64us; 68us; 66us; 68us; 3us; 65535us; 23us; 24us; 35us; 36us; 71us; 72us; 10us; 65535us; 0us; 27us; 9us; 27us; 14us; 27us; 18us; 19us; 21us; 27us; 25us; 27us; 29us; 27us; 33us; 27us; 37us; 27us; 39us; 27us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 6us; 7us; 23us; 39us; 49us; 59us; 69us; 85us; 101us; 117us; 139us; 144us; 160us; 164us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 6us; 3us; 6us; 22us; 23us; 1us; 7us; 1us; 8us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 2us; 13us; 14us; 1us; 14us; 2us; 15us; 26us; 1us; 16us; 2us; 17us; 18us; 7us; 17us; 18us; 59us; 60us; 61us; 62us; 63us; 2us; 17us; 18us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 10us; 19us; 20us; 21us; 24us; 25us; 59us; 60us; 61us; 62us; 63us; 5us; 19us; 20us; 21us; 24us; 25us; 1us; 19us; 1us; 19us; 2us; 20us; 24us; 13us; 20us; 24us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 2us; 20us; 24us; 1us; 20us; 2us; 21us; 25us; 2us; 21us; 25us; 2us; 21us; 25us; 1us; 21us; 2us; 22us; 23us; 1us; 22us; 4us; 27us; 28us; 29us; 30us; 4us; 27us; 28us; 29us; 30us; 4us; 27us; 28us; 29us; 30us; 4us; 27us; 28us; 29us; 30us; 2us; 27us; 28us; 2us; 27us; 28us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 2us; 29us; 30us; 2us; 29us; 30us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 2us; 31us; 32us; 2us; 31us; 32us; 13us; 31us; 32us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 2us; 31us; 32us; 2us; 31us; 32us; 1us; 31us; 1us; 31us; 3us; 33us; 34us; 57us; 1us; 33us; 12us; 33us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 36us; 3us; 37us; 39us; 52us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 12us; 39us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 1us; 39us; 12us; 40us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 12us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 12us; 40us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 12us; 40us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 12us; 40us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 12us; 40us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 12us; 40us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 12us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 12us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 12us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 12us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 12us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 13us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 53us; 54us; 12us; 40us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 57us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 53us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 58us; 2us; 59us; 60us; 1us; 59us; 1us; 59us; 1us; 60us; 1us; 60us; 3us; 61us; 62us; 63us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 63us; 3us; 64us; 65us; 68us; 2us; 64us; 65us; 1us; 64us; 1us; 64us; 1us; 65us; 1us; 65us; 3us; 66us; 67us; 69us; 2us; 66us; 67us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 67us; 1us; 67us; 1us; 70us; 1us; 71us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 14us; 16us; 18us; 20us; 23us; 25us; 27us; 29us; 31us; 34us; 36us; 39us; 41us; 44us; 52us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 78us; 84us; 86us; 88us; 91us; 105us; 108us; 110us; 113us; 116us; 119us; 121us; 124us; 126us; 131us; 136us; 141us; 146us; 149us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 167us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 185us; 188us; 202us; 205us; 208us; 210us; 212us; 216us; 218us; 231us; 233us; 235us; 237us; 239us; 243us; 245us; 247us; 249us; 251us; 264us; 266us; 279us; 292us; 305us; 318us; 331us; 344us; 357us; 370us; 383us; 396us; 409us; 422us; 436us; 449us; 451us; 453us; 455us; 457us; 459us; 461us; 463us; 465us; 467us; 469us; 471us; 473us; 475us; 477us; 479us; 481us; 483us; 485us; 487us; 489us; 491us; 493us; 495us; 497us; 499us; 501us; 503us; 506us; 508us; 510us; 512us; 514us; 518us; 520us; 522us; 524us; 526us; 528us; 532us; 535us; 537us; 539us; 541us; 543us; 547us; 550us; 552us; 554us; 556us; 558us; 560us; 562us; 564us; 566us; 568us; |]
let _fsyacc_action_rows = 152
let _fsyacc_actionTableElements = [|10us; 32768us; 0us; 16us; 8us; 9us; 24us; 61us; 27us; 41us; 29us; 134us; 30us; 140us; 31us; 18us; 32us; 151us; 33us; 150us; 35us; 116us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16390us; 1us; 16390us; 2us; 39us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 11us; 32768us; 0us; 16us; 8us; 9us; 9us; 10us; 24us; 61us; 27us; 41us; 29us; 134us; 30us; 140us; 31us; 18us; 32us; 151us; 33us; 150us; 35us; 116us; 0us; 16394us; 1us; 32768us; 9us; 12us; 0us; 16395us; 0us; 16396us; 10us; 16397us; 0us; 16us; 8us; 9us; 24us; 61us; 27us; 41us; 29us; 134us; 30us; 140us; 31us; 18us; 32us; 151us; 33us; 150us; 35us; 116us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 4us; 32768us; 29us; 134us; 30us; 140us; 32us; 151us; 33us; 150us; 3us; 32768us; 4us; 128us; 20us; 123us; 35us; 20us; 2us; 32768us; 2us; 21us; 15us; 23us; 10us; 32768us; 0us; 16us; 8us; 9us; 24us; 61us; 27us; 41us; 29us; 134us; 30us; 140us; 31us; 18us; 32us; 151us; 33us; 150us; 35us; 116us; 0us; 16401us; 1us; 32768us; 35us; 119us; 1us; 32768us; 2us; 25us; 10us; 32768us; 0us; 16us; 8us; 9us; 24us; 61us; 27us; 41us; 29us; 134us; 30us; 140us; 31us; 18us; 32us; 151us; 33us; 150us; 35us; 116us; 0us; 16402us; 3us; 32768us; 4us; 128us; 20us; 123us; 35us; 28us; 3us; 32768us; 2us; 29us; 14us; 31us; 15us; 35us; 10us; 32768us; 0us; 16us; 8us; 9us; 24us; 61us; 27us; 41us; 29us; 134us; 30us; 140us; 31us; 18us; 32us; 151us; 33us; 150us; 35us; 116us; 0us; 16403us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 12us; 32768us; 2us; 33us; 4us; 96us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 10us; 16408us; 0us; 16us; 8us; 9us; 24us; 61us; 27us; 41us; 29us; 134us; 30us; 140us; 31us; 18us; 32us; 151us; 33us; 150us; 35us; 116us; 0us; 16404us; 1us; 32768us; 35us; 119us; 1us; 32768us; 2us; 37us; 10us; 16409us; 0us; 16us; 8us; 9us; 24us; 61us; 27us; 41us; 29us; 134us; 30us; 140us; 31us; 18us; 32us; 151us; 33us; 150us; 35us; 116us; 0us; 16405us; 10us; 16407us; 0us; 16us; 8us; 9us; 24us; 61us; 27us; 41us; 29us; 134us; 30us; 140us; 31us; 18us; 32us; 151us; 33us; 150us; 35us; 116us; 0us; 16406us; 1us; 32768us; 6us; 42us; 1us; 32768us; 35us; 43us; 1us; 32768us; 28us; 44us; 2us; 32768us; 35us; 53us; 37us; 45us; 1us; 32768us; 3us; 46us; 2us; 32768us; 35us; 50us; 37us; 47us; 1us; 32768us; 7us; 48us; 4us; 32768us; 8us; 9us; 24us; 61us; 27us; 41us; 35us; 116us; 0us; 16411us; 1us; 32768us; 7us; 51us; 4us; 32768us; 8us; 9us; 24us; 61us; 27us; 41us; 35us; 116us; 0us; 16412us; 1us; 32768us; 3us; 54us; 2us; 32768us; 35us; 55us; 37us; 58us; 1us; 32768us; 7us; 56us; 4us; 32768us; 8us; 9us; 24us; 61us; 27us; 41us; 35us; 116us; 0us; 16413us; 1us; 32768us; 7us; 59us; 4us; 32768us; 8us; 9us; 24us; 61us; 27us; 41us; 35us; 116us; 0us; 16414us; 1us; 32768us; 6us; 62us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 12us; 32768us; 4us; 96us; 7us; 64us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 4us; 32768us; 8us; 9us; 24us; 61us; 27us; 41us; 35us; 116us; 1us; 16416us; 25us; 66us; 4us; 32768us; 8us; 9us; 24us; 61us; 27us; 41us; 35us; 116us; 0us; 16415us; 3us; 32768us; 4us; 117us; 14us; 69us; 15us; 71us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 11us; 16417us; 4us; 96us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 1us; 32768us; 35us; 119us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 2us; 16421us; 4us; 79us; 6us; 110us; 6us; 32768us; 0us; 115us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 1us; 32768us; 5us; 78us; 0us; 16422us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 12us; 32768us; 4us; 96us; 5us; 81us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 0us; 16423us; 12us; 32768us; 4us; 96us; 5us; 97us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 12us; 32768us; 4us; 96us; 7us; 99us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 11us; 16426us; 4us; 96us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 11us; 16427us; 4us; 96us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 8us; 16428us; 4us; 96us; 12us; 100us; 13us; 101us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 10us; 16429us; 4us; 96us; 12us; 100us; 13us; 101us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 11us; 16430us; 4us; 96us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 11us; 16431us; 4us; 96us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 11us; 16432us; 4us; 96us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 11us; 16433us; 4us; 96us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 9us; 16434us; 4us; 96us; 12us; 100us; 13us; 101us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 7us; 16435us; 4us; 96us; 12us; 100us; 13us; 101us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 12us; 16438us; 1us; 113us; 4us; 96us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 12us; 32768us; 4us; 96us; 5us; 118us; 12us; 100us; 13us; 101us; 16us; 103us; 17us; 108us; 18us; 102us; 19us; 109us; 20us; 104us; 21us; 105us; 22us; 106us; 23us; 107us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 0us; 16424us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 0us; 16425us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 6us; 32768us; 0us; 115us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 1us; 32768us; 7us; 112us; 0us; 16436us; 6us; 32768us; 0us; 115us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 0us; 16437us; 0us; 16439us; 0us; 16440us; 5us; 32768us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 0us; 16441us; 1us; 32768us; 6us; 120us; 6us; 32768us; 0us; 115us; 4us; 76us; 6us; 98us; 35us; 75us; 36us; 73us; 37us; 74us; 1us; 32768us; 7us; 122us; 0us; 16442us; 2us; 32768us; 35us; 124us; 37us; 126us; 1us; 32768us; 21us; 125us; 0us; 16443us; 1us; 32768us; 21us; 127us; 0us; 16444us; 3us; 32768us; 5us; 133us; 35us; 129us; 37us; 131us; 1us; 32768us; 5us; 130us; 0us; 16445us; 1us; 32768us; 5us; 132us; 0us; 16446us; 0us; 16447us; 1us; 16452us; 4us; 135us; 2us; 32768us; 35us; 136us; 37us; 138us; 1us; 32768us; 5us; 137us; 0us; 16448us; 1us; 32768us; 5us; 139us; 0us; 16449us; 1us; 16453us; 4us; 141us; 2us; 32768us; 35us; 142us; 37us; 146us; 1us; 32768us; 1us; 143us; 1us; 32768us; 35us; 144us; 1us; 32768us; 5us; 145us; 0us; 16450us; 1us; 32768us; 1us; 147us; 1us; 32768us; 37us; 148us; 1us; 32768us; 5us; 149us; 0us; 16451us; 0us; 16454us; 0us; 16455us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 13us; 14us; 15us; 17us; 18us; 19us; 20us; 32us; 33us; 35us; 36us; 37us; 48us; 49us; 50us; 51us; 56us; 60us; 63us; 74us; 75us; 77us; 79us; 90us; 91us; 95us; 99us; 110us; 111us; 117us; 130us; 141us; 142us; 144us; 146us; 157us; 158us; 169us; 170us; 172us; 174us; 176us; 179us; 181us; 184us; 186us; 191us; 192us; 194us; 199us; 200us; 202us; 205us; 207us; 212us; 213us; 215us; 220us; 221us; 223us; 229us; 242us; 247us; 249us; 254us; 255us; 259us; 265us; 277us; 279us; 280us; 281us; 282us; 285us; 292us; 294us; 295us; 301us; 314us; 315us; 328us; 341us; 353us; 365us; 374us; 385us; 397us; 409us; 421us; 433us; 443us; 451us; 464us; 477us; 483us; 484us; 490us; 491us; 497us; 503us; 509us; 515us; 521us; 527us; 533us; 539us; 545us; 551us; 558us; 560us; 561us; 568us; 569us; 570us; 571us; 577us; 578us; 580us; 587us; 589us; 590us; 593us; 595us; 596us; 598us; 599us; 603us; 605us; 606us; 608us; 609us; 610us; 612us; 615us; 617us; 618us; 620us; 621us; 623us; 626us; 628us; 630us; 632us; 633us; 635us; 637us; 639us; 640us; 641us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 1us; 2us; 1us; 1us; 1us; 1us; 2us; 3us; 1us; 1us; 2us; 1us; 1us; 5us; 7us; 4us; 6us; 6us; 3us; 2us; 5us; 5us; 1us; 9us; 9us; 9us; 9us; 7us; 5us; 3us; 3us; 1us; 1us; 1us; 3us; 4us; 4us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 3us; 1us; 1us; 1us; 4us; 4us; 4us; 4us; 4us; 4us; 3us; 4us; 4us; 6us; 6us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16390us; 65535us; 16391us; 16392us; 16393us; 65535us; 16394us; 65535us; 16395us; 16396us; 65535us; 16398us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 16405us; 65535us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 16418us; 16419us; 16420us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 16425us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16436us; 65535us; 16437us; 16439us; 16440us; 65535us; 16441us; 65535us; 65535us; 65535us; 16442us; 65535us; 65535us; 16443us; 65535us; 16444us; 65535us; 65535us; 16445us; 65535us; 16446us; 16447us; 65535us; 65535us; 65535us; 16448us; 65535us; 16449us; 65535us; 65535us; 65535us; 65535us; 65535us; 16450us; 65535us; 65535us; 65535us; 16451us; 16454us; 16455us; |]
let _fsyacc_reductions ()  =    [| 
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SlicStanSyntax.SlicStanProg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 384 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                   _1 
                   )
# 32 "Parser.fsy"
                 : SlicStanSyntax.SlicStanProg));
# 395 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                            [], _1 
                   )
# 36 "Parser.fsy"
                 : 'prog));
# 406 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                          _1 :: _3 
                   )
# 50 "Parser.fsy"
                 : 'args));
# 418 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                               [_1] 
                   )
# 51 "Parser.fsy"
                 : 'args));
# 429 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                  (_1, LevelVar (next())), _2 
                   )
# 54 "Parser.fsy"
                 : 'arg));
# 441 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_single)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                            _1 
                   )
# 59 "Parser.fsy"
                 : 'statement));
# 452 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'compound_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                              _1 
                   )
# 60 "Parser.fsy"
                 : 'statement));
# 463 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'selection_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                               _1 
                   )
# 61 "Parser.fsy"
                 : 'statement));
# 474 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'iteration_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                               _1 
                   )
# 62 "Parser.fsy"
                 : 'statement));
# 485 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                        Skip 
                   )
# 65 "Parser.fsy"
                 : 'compound_statement));
# 495 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                         _2 
                   )
# 66 "Parser.fsy"
                 : 'compound_statement));
# 506 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                      _1 
                   )
# 69 "Parser.fsy"
                 : 'block_item_list));
# 517 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                     _1 
                   )
# 70 "Parser.fsy"
                 : 'block_item_list));
# 528 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                     Seq(_1, _2) 
                   )
# 71 "Parser.fsy"
                 : 'block_item_list));
# 540 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                              Skip 
                   )
# 72 "Parser.fsy"
                 : 'block_item_list));
# 550 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                    _1 
                   )
# 75 "Parser.fsy"
                 : 'block_item));
# 561 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                                  Decl(((_2, Data), _3), _5) 
                   )
# 79 "Parser.fsy"
                 : 'declaration));
# 574 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                                           Decl(((_2, Data), _3), Seq(Sample(I(_3), _5), _7)) 
                   )
# 80 "Parser.fsy"
                 : 'declaration));
# 588 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                             Decl(((_1, LevelVar (next())), _2), _4) 
                   )
# 81 "Parser.fsy"
                 : 'declaration));
# 601 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                                    Decl(((_1, LevelVar (next())), _2), Seq(Assign(I(_2), _4), _6)) 
                   )
# 82 "Parser.fsy"
                 : 'declaration));
# 615 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                                      Decl(((_1, LevelVar (next())), _2), Seq(Sample(I(_2), _4), _6)) 
                   )
# 83 "Parser.fsy"
                 : 'declaration));
# 629 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_single)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_item_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                                       Seq(_1, _3) 
                   )
# 84 "Parser.fsy"
                 : 'declaration));
# 641 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement_single)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                      _1 
                   )
# 85 "Parser.fsy"
                 : 'declaration));
# 652 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                   Decl(((_1, LevelVar (next())), _2), Assign(I(_2), _4)) 
                   )
# 86 "Parser.fsy"
                 : 'declaration));
# 665 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                     Decl(((_1, LevelVar (next())), _2), Sample(I(_2), _4)) 
                   )
# 87 "Parser.fsy"
                 : 'declaration));
# 678 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                               Skip 
                   )
# 88 "Parser.fsy"
                 : 'declaration));
# 688 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                         For(((Int, Data), _3), N(_5), N(_7), _9) 
                   )
# 92 "Parser.fsy"
                 : 'iteration_statement));
# 702 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                         For(((Int, Data), _3), N(_5), SizeVar(_7), _9) 
                   )
# 93 "Parser.fsy"
                 : 'iteration_statement));
# 716 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                         For(((Int, Data), _3), SizeVar(_5), SizeVar(_7), _9) 
                   )
# 94 "Parser.fsy"
                 : 'iteration_statement));
# 730 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                                         For(((Int, Data), _3), SizeVar(_5), N(_7), _9) 
                   )
# 95 "Parser.fsy"
                 : 'iteration_statement));
# 744 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                                      If(_3, _5, _7) 
                   )
# 98 "Parser.fsy"
                 : 'selection_statement));
# 757 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                       If(_3, _5, Skip) 
                   )
# 99 "Parser.fsy"
                 : 'selection_statement));
# 769 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lhs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                      Assign(_1, _3) 
                   )
# 103 "Parser.fsy"
                 : 'statement_single));
# 781 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lhs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dist)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                        Sample(_1, _3) 
                   )
# 104 "Parser.fsy"
                 : 'statement_single));
# 793 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                Const(_1) 
                   )
# 108 "Parser.fsy"
                 : 'exp));
# 804 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                Const(float _1) 
                   )
# 109 "Parser.fsy"
                 : 'exp));
# 815 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                Var(_1) 
                   )
# 110 "Parser.fsy"
                 : 'exp));
# 826 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                             Arr(_2) 
                   )
# 111 "Parser.fsy"
                 : 'exp));
# 837 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                ArrElExp(Var(_1), _3) 
                   )
# 112 "Parser.fsy"
                 : 'exp));
# 849 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                ArrElExp(_1, _3) 
                   )
# 113 "Parser.fsy"
                 : 'exp));
# 861 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                          _2 
                   )
# 114 "Parser.fsy"
                 : 'exp));
# 872 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                          Prim(".*", [_1; _3])  
                   )
# 115 "Parser.fsy"
                 : 'exp));
# 884 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                         Prim("./", [_1; _3])  
                   )
# 116 "Parser.fsy"
                 : 'exp));
# 896 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                        Mul(_1, _3) 
                   )
# 117 "Parser.fsy"
                 : 'exp));
# 908 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                        Plus(_1, _3) 
                   )
# 118 "Parser.fsy"
                 : 'exp));
# 920 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                      Prim("<", [_1; _3]) 
                   )
# 119 "Parser.fsy"
                 : 'exp));
# 932 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                      Prim(">", [_1; _3]) 
                   )
# 120 "Parser.fsy"
                 : 'exp));
# 944 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                       Prim("<=", [_1; _3]) 
                   )
# 121 "Parser.fsy"
                 : 'exp));
# 956 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                       Prim(">=", [_1; _3]) 
                   )
# 122 "Parser.fsy"
                 : 'exp));
# 968 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                         Prim("-", [_1; _3]) 
                   )
# 123 "Parser.fsy"
                 : 'exp));
# 980 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                       Prim("/", [_1; _3]) 
                   )
# 124 "Parser.fsy"
                 : 'exp));
# 992 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                               if (Map.containsKey _1 Primitives) then Prim(_1, _3) else failwith "TODO: fix user-defined functions" 
                   )
# 125 "Parser.fsy"
                 : 'exp));
# 1004 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                          _1 :: _3 
                   )
# 128 "Parser.fsy"
                 : 'exps));
# 1016 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                               [_1] 
                   )
# 129 "Parser.fsy"
                 : 'exps));
# 1027 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                               [] 
                   )
# 130 "Parser.fsy"
                 : 'exps));
# 1037 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                               I(_1) 
                   )
# 133 "Parser.fsy"
                 : 'lhs));
# 1048 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lhs)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                A(_1, _3) 
                   )
# 134 "Parser.fsy"
                 : 'lhs));
# 1060 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                               Dist(_1, _3) 
                   )
# 137 "Parser.fsy"
                 : 'dist));
# 1072 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                       Constrained(_1, SizeVar(_3)) 
                   )
# 140 "Parser.fsy"
                 : 'tp));
# 1084 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                        Constrained(_1, N(_3)) 
                   )
# 141 "Parser.fsy"
                 : 'tp));
# 1096 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                              Array(_1, SizeVar(_3)) 
                   )
# 142 "Parser.fsy"
                 : 'tp));
# 1108 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                               Array(_1, N(_3)) 
                   )
# 143 "Parser.fsy"
                 : 'tp));
# 1120 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                           Array(_1, N(-1)) 
                   )
# 144 "Parser.fsy"
                 : 'tp));
# 1131 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                  Vector(SizeVar(_3)) 
                   )
# 145 "Parser.fsy"
                 : 'tp));
# 1142 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                  Vector(N(_3))
                   )
# 146 "Parser.fsy"
                 : 'tp));
# 1153 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                            Matrix(SizeVar(_3), SizeVar(_5))
                   )
# 147 "Parser.fsy"
                 : 'tp));
# 1165 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                            Matrix(N(_3), N(_5))
                   )
# 148 "Parser.fsy"
                 : 'tp));
# 1177 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                    Vector(N(-1)) 
                   )
# 149 "Parser.fsy"
                 : 'tp));
# 1187 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                    Matrix(N(-1), N(-1)) 
                   )
# 150 "Parser.fsy"
                 : 'tp));
# 1197 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                    Real 
                   )
# 151 "Parser.fsy"
                 : 'tp));
# 1207 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                    Int 
                   )
# 152 "Parser.fsy"
                 : 'tp));
|]
# 1218 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 41;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : SlicStanSyntax.SlicStanProg =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
